{
  "consumer": {
    "name": "ItemsApiConsumer"
  },
  "interactions": [
    {
      "description": "A GET request for a non-existent item",
      "providerStates": [
        {
          "name": "no item with ID 999 exists"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items/999"
      },
      "response": {
        "body": {
          "error": "Item with ID 999 not found."
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.error": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 404
      }
    },
    {
      "description": "A GET request to check existing items before creation",
      "providerStates": [
        {
          "name": "items exist"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items"
      },
      "response": {
        "body": [
          {
            "Id": 1,
            "Name": "Sample Item 1"
          }
        ],
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type",
                  "min": 1
                }
              ]
            },
            "$[*].Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$[*].Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 200
      }
    },
    {
      "description": "A GET request to retrieve a specific item by ID",
      "providerStates": [
        {
          "name": "item with ID 1 exists"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items/1"
      },
      "response": {
        "body": {
          "Id": 1,
          "Name": "Sample Item 1"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 200
      }
    },
    {
      "description": "A GET request to retrieve all items",
      "providerStates": [
        {
          "name": "items exist"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items"
      },
      "response": {
        "body": [
          {
            "Id": 1,
            "Name": "Sample Item 1"
          }
        ],
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type",
                  "min": 1
                }
              ]
            },
            "$[*].Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$[*].Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 200
      }
    },
    {
      "description": "A GET request with invalid item ID",
      "providerStates": [
        {
          "name": "the API is available"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items/0"
      },
      "response": {
        "body": {
          "error": "Invalid item ID."
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.error": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 400
      }
    },
    {
      "description": "A POST request to create a new item",
      "providerStates": [
        {
          "name": "the API is available"
        }
      ],
      "request": {
        "body": {
          "name": "New Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "method": "POST",
        "path": "/api/items"
      },
      "response": {
        "body": {
          "Id": 3,
          "Name": "New Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 201
      }
    },
    {
      "description": "A POST request to create a workflow item",
      "providerStates": [
        {
          "name": "the API is available"
        }
      ],
      "request": {
        "body": {
          "name": "Workflow Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "method": "POST",
        "path": "/api/items"
      },
      "response": {
        "body": {
          "Id": 6,
          "Name": "Workflow Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 201
      }
    },
    {
      "description": "A GET request to verify the newly created item",
      "providerStates": [
        {
          "name": "item with ID 6 exists"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items/6"
      },
      "response": {
        "body": {
          "Id": 6,
          "Name": "Workflow Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 200
      }
    },
    {
      "description": "A POST request with duplicate item name",
      "providerStates": [
        {
          "name": "item with name 'Sample Item 1' already exists"
        }
      ],
      "request": {
        "body": {
          "name": "Sample Item 1"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "method": "POST",
        "path": "/api/items"
      },
      "response": {
        "body": {
          "error": "Item with this name already exists."
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.error": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 409
      }
    },
    {
      "description": "A POST request with empty item name",
      "providerStates": [
        {
          "name": "the API is available"
        }
      ],
      "request": {
        "body": {
          "name": ""
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "method": "POST",
        "path": "/api/items"
      },
      "response": {
        "body": {
          "error": "Item name cannot be empty."
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.error": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 400
      }
    },
    {
      "description": "A POST request with empty name for validation",
      "providerStates": [
        {
          "name": "the API is available"
        }
      ],
      "request": {
        "body": {
          "name": ""
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "method": "POST",
        "path": "/api/items"
      },
      "response": {
        "body": {
          "error": "Item name cannot be empty."
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.error": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 400
      }
    },
    {
      "description": "A GET request to check existing items after validation error",
      "providerStates": [
        {
          "name": "items exist"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items"
      },
      "response": {
        "body": [
          {
            "Id": 1,
            "Name": "Sample Item 1"
          }
        ],
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type",
                  "min": 1
                }
              ]
            },
            "$[*].Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$[*].Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 200
      }
    },
    {
      "description": "A GET request to check specific existing item",
      "providerStates": [
        {
          "name": "item with ID 1 exists"
        }
      ],
      "request": {
        "method": "GET",
        "path": "/api/items/1"
      },
      "response": {
        "body": {
          "Id": 1,
          "Name": "Sample Item 1"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 200
      }
    },
    {
      "description": "A POST request with valid data after validation",
      "providerStates": [
        {
          "name": "the API is available"
        }
      ],
      "request": {
        "body": {
          "name": "Valid Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "method": "POST",
        "path": "/api/items"
      },
      "response": {
        "body": {
          "Id": 6,
          "Name": "Valid Item"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "body": {
            "$.Id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            },
            "$.Name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "type"
                }
              ]
            }
          }
        },
        "status": 201
      }
    }
  ],
  "metadata": {
    "pactRust": {
      "ffi": "0.4.27",
      "models": "1.2.8"
    },
    "pactSpecification": {
      "version": "3.0.0"
    }
  },
  "provider": {
    "name": "ItemsApiProvider"
  }
}